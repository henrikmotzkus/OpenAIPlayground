@page "/search"

@using System.Text.Json;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text
@using System.Reflection
@inject HttpClient Http 

<PageTitle>Search</PageTitle>

<h1>Search in Azure AI Search</h1>

<p>
    <div class="mb-3">
        <label for="exampleFormControlInput1" class="form-label">Search term</label>
        <InputText class="form-control" id="exampleFormControlInput1" placeholder="motel" @bind-Value="@searchTerm" />
    </div>
</p>
<p>
    <div>
        <label>
            Select index
            <InputSelect class="form-select form-select-sm" aria-label=".form-select-sm example" @bind-Value="@selectedIndex">
                <option value="hotels-sample-index">Index 1</option>
                <option value="hotels-sample-index-2">Index 2</option>
            </InputSelect>
        </label>
    </div>
</p>
<p>
    <button class="btn btn-primary" @onclick="SearchAPI">Start Search</button>
</p>


<pre>@htmlresponse</pre>

@code {


    String searchTerm = "";
    String selectedIndex = "";

    String htmlresponse = "";
    protected async Task SearchAPI()
    {
        try
        {
            using StringContent jsonContent = new(
                JsonSerializer.Serialize(new
                {
                        queryType = "simple",
                        search = searchTerm,
                        filter = "",
                        select = "HotelName,Description,Category,Tags",
                        count = true
                    }),
                    Encoding.UTF8,
                    "application/json");
            using HttpResponseMessage response = await Http.PostAsync("indexes/" + selectedIndex +"/docs/search?api-version=2023-11-01", jsonContent);
            var jsonResponse = await response.Content.ReadAsStringAsync();
            //htmlresponse = jsonResponse;
            htmlresponse = PrettyJson(jsonResponse);
            Console.WriteLine($"{htmlresponse}\n");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    public string PrettyJson(string unPrettyJson)
    {
        var options = new JsonSerializerOptions(){
            WriteIndented = true
        };

        var jsonElement = JsonSerializer.Deserialize<JsonElement>(unPrettyJson);

        return JsonSerializer.Serialize(jsonElement, options);
    }

}
